<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Shakil Thakur - SHAKBLOG]]></title><description><![CDATA[Life Abridged.]]></description><link>http://shakilthakur.com/</link><generator>Ghost 0.5</generator><lastBuildDate>Thu, 27 Nov 2014 05:27:11 GMT</lastBuildDate><atom:link href="http://shakilthakur.com/author/shakil/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[TableSalt now available in luarocks!]]></title><description><![CDATA[<p>I MODULARIZED IT! WOOHOO! with no extra dependencies~! No need to <code>git submodule add</code> any longer! Just a regular old module install via luarocks:  </p>

<pre><code class="lang-lua">luarocks install TableSalt  
</code></pre>

<p>and <code>require('TableSalt')</code> as you do and you're good to go! I still need to update the documentation, but no worries I'll get to it soon!</p>

<h2 id="otherstuffs">Other stuffs</h2>

<ul>
<li>bug fixed when using non-square puzzles</li>
<li>added a <code>TableSalt:getAllValues()</code> method that returns the current values of all the variables as a table.</li>
</ul>

<p>These came about while working on my <a href="http://shakilthakur.com/quickly-writing-a-kakuro-solver/">Kakuro Solver</a> where I also realized that returning some errors that are useful to the user might be a good idea as well. The most common issue I can see people running in to is not having a constraint associated with every variable in the CSP - as of now TableSalt will just return some generic lua error somewhere along the line... Also, I'll likely take a break from working on after I finish the docs and am not entirely sure when/if I'll pick it up again...</p>]]></description><link>http://shakilthakur.com/tablesalt-now-in-luarocks/</link><guid isPermaLink="false">e24738df-a9a4-4e82-91b9-2abb7aecc41c</guid><category><![CDATA[TableSalt]]></category><dc:creator><![CDATA[Shakil Thakur]]></dc:creator><pubDate>Thu, 27 Nov 2014 03:41:15 GMT</pubDate></item><item><title><![CDATA[Quickly Writing a Kakuro Solver]]></title><description><![CDATA[<p>I finished my Kakuro Solver in a little over a <em>weekend</em>. I spent MONTHS working on my Sudoku Solver (and TableSalt...) and managed a complete overhaul of Kakuro in a few days. This was accomplished through good code design and practices! (not to mention using a pre-existing framework to do some heavy lifting!)</p>

<p>I've gone over my process (more high level) and some of the things I learned in school and from friends that helped make it easy to do!</p>

<h2 id="gettingstarted">Getting Started!</h2>

<p>A few days back I <a href="http://shakilthakur.com/tablesalt-final-forward-check-features"><strong>finally</strong></a> finished TableSalt (or at least got it in a working state - there's still more to do) - and what was there to do with the it after it was done? Cook up something cool! My next step was <a href="http://en.wikipedia.org/wiki/Kakuro">Kakuro</a> - an interesting crossword-esque mathematical puzzle. It can be setup as a Constraint Problem, so it became the next big problem to solve. Kakuro added a "sum" component to my already existing <code>allDiff</code> constraint (found in TableSalt) and the <code>allDiffSum</code> constraint was born! The idea was taken from Helmut Simonis' wonderful paper on <a href="http://4c.ucc.ie/~hsimonis/kakuro%20modref08.pdf">Kakuro as a Constraint Problem</a>.</p>

<h2 id="butialreadystartedthis">but I already started this...</h2>

<p><a href="https://github.com/FourierTransformer/KakuroSolver/tree/dc4ddf2bf9b8dd0bf862cdc81cc3c3d06616a377">I did,</a> but it looks like I never fully committed after I started the parser...! And it didn't really work... I had taken a stab at this earlier when TableSalt was in it's infancy. I got the old code working with the [freshly modularized TableSalt] and realized it was a cluster. Fairly confusing code with few comments and no documentation (heck <code>allDiffSum.lua</code> still looks a little bleak, which I should get to like NOW). So, I spent very little time trying to fix it and quickly scrapped it and moved on.</p>

<blockquote>
  <p><strong>KILL IT WITH FIRE!</strong> <em>(shhh the analyzer was actually pretty legit)</em> <sub><sup>and don't be afraid to rewrite!</sup></sub></p>
</blockquote>

<h2 id="theparserwasgarbage">The Parser was garbage.</h2>

<p>At some point, most programmers will have to write some form of a parser - for the simple reason that people need to provide input and we need some way to read in and then analyze what that the input means.</p>

<p>My parser was garbage. No comments, crazy code, no idea how it worked (oh and it <strong>DIDN'T</strong> a lot of the time) and I'm pretty sure it passed on poorly parsed puzzles to the analyzer without a second thought.  </p>

<blockquote>
  <p>Error handling is like magic sauce for parsers. If you error out at the parser, there is a very clear "This is what I can and can't do" and you can prevent pain and suffering later on.</p>
</blockquote>

<p>So, I scrapped it. I recalled how it was supposed to work: read in the puzzle file line by line, split up the code via "segment" (the stuff between the pipes), figure out what's in the segment, and send it off to the correct table. The tables then went off for analysis! The design was good, the implementation was terrible - and BAM - a quick rewrite with comments and error handling was all it needed and we're good to go!</p>

<h4 id="thekakuropuzzlefromwikipediaasatxtfile">The Kakuro Puzzle from WikiPedia as a txt file</h4>

<pre><code class="lang-none"> 0\ 0|23\ 0|30\ 0| 0\ 0| 0\ 0|27\ 0|12\ 0|16\ 0
 0\16|  0  |  0  | 0\ 0|17\24|  0  |  0  |  0
 0\17|  0  |  0  |15\29|  0  |  0  |  0  |  0
 0\35|  0  |  0  |  0  |  0  |  0  |12\ 0| 0\ 0
 0\ 0| 0\ 7|  0  |  0  | 7\ 8|  0  |  0  | 7\ 0
 0\ 0|11\ 0|10\16|  0  |  0  |  0  |  0  |  0
 0\21|  0  |  0  |  0  |  0  | 0\ 5|  0  |  0
 0\ 6|  0  |  0  |  0  | 0\ 0| 0\ 3|  0  |  0
</code></pre>

<h2 id="theanalyzer">The Analyzer</h2>

<p>Cool. CoolCoolCool. I have all the values in the tables! Now, I just need to trun them into constraints. My old code was fairly uncommented, but this worked well enough as the design around it hadn't changed. I brought back a couple of for loops, added a couple of comments, and it was done.</p>

<blockquote>
  <p>Reusing bits of code when the application is right can be a good idea.</p>
</blockquote>

<h2 id="solvingthingsfast">solving things fast</h2>

<p>Kakuro is an interesting little game that one of my friends played a lot of back in high school. He always said it was much better than sudoku because it was a little more challenging and not as boring. Having to sum the values in the boxes as well as ensuring they are all different - a fairly simple concept to say the least.</p>

<p>Solving a puzzle requires determining which combination of unique numbers can be used to sum to a number in a given length. Last time, I attempted to write my own Kakuro Combination finder. <em>That wasted a lot of time</em> (a couple of days/weeks would be my bet) and luckily the internet is a thing and I managed to find a javascript version on <a href="http://codegolf.stackexchange.com/questions/35562/kakuro-combinations">stackexchange</a> that was easy enough to follow and ported it over to Lua. A <strong>major</strong> time savings in my opinion as I'm not mathemagical enough to write such a thing.</p>

<blockquote>
  <p>Before you write some code, always poke around the interwebs, someone likely already wrote it!</p>
</blockquote>

<h2 id="weredoneright">We're done, right?!</h2>

<p>Nope - but we're getting there! I just subbed in someone else's code and have no idea how it works - let alone if it works and then I'm throwing it into a mostly untested framework.</p>

<blockquote>
  <p>Always write Unit Tests First.</p>
</blockquote>

<p>and start small. Don't send in an entire Kakuro Puzzle and claim it's a test. You'll go mad debugging that. Try something simple like trying to sum to 5 with one number:  </p>

<pre><code class="lang-lua">print(KakuroCombinator(5, 1))  
</code></pre>

<p>Good. Now make sure your constraint that's implementing your combination finder works as expected as well. (Don't worry it's only 4 lines of code)  </p>

<pre><code class="lang-lua">kakuro = TableSalt:new({1, 2, 3, 4, 5, 6, 7, 8, 9},  1)  
kakuro:addConstraintByIDs({1}, allDiffSum, 5)  
kakuro:solve()  
kakuro:print()  
</code></pre>

<p>From here we move on to do some more things like adding values in two segments, dealing with combinations vs permutations, and slowly working our way up to a full puzzle.</p>

<p>I should've also written tests for the parser and the analyzer but I didn't. It was a choice I made and there are couple of reasons for it: </p>

<ul>
<li>The parser and analyzer aren't too complex - it's not like the code is being sent into this vortex of insanity. It's just a couple <code>if</code>'s and <code>for</code>'s.</li>
<li>They likely wont be used outside my 14 testing puzzles whereas the <code>allDiffSum</code> constraint could be used in many other situations (MOAR PUZZLE PROBLEMS!)</li>
</ul>

<p>Some people would argue this is bad coding practice - and they're not wrong. Perhaps if I have some time - I'll go back in and write some tests for it - but for now <em>I'm good</em>.</p>

<h2 id="sowheresthatfancyunittestinglibrary">So, where's that fancy unit testing library?</h2>

<p>For a long time I associated Unit tests with some sort of unit-testing library, possibly because I originally exposed to it via junit with Java early on. And while it's <strong>highly</strong> recommended and <em>incredibly</em> useful to have a unit testing library a non-self-verifying <code>print()</code> statement should suffice at the beginning and turning it into a full on proper unit test isn't all too hard (in most languages):</p>

<pre><code class="lang-lua">it("should all equal 5", function()  
    kakuro = TableSalt:new({1, 2, 3, 4, 5, 6, 7, 8, 9},  1)
    kakuro:addConstraintByIDs({1}, allDiffSum, 5)
    kakuro:solve()
    assert.tcompare(kakuro:getAllValues(), {5})
end)  
</code></pre>

<p>This is part of a development process known as Test Driven Development. TDD SAVES SO MUCH TIME. It can also help alleviate concerns when refactoring - can't be stressed enough and is one of the most important things college taught me that changed the how I think about  <em>and write</em> code.</p>

<blockquote>
  <p>One of the paradigms of Test Driven Development (TDD) is that the expected input/output of a function is known and the code design is planned out before the code is written.</p>
</blockquote>

<h2 id="sweet">SWEET!</h2>

<p>The tests are working and the code is complete. It's time to SCALE UP! Things can get cray when trying to scale up (look at many popular mobile apps, startups, and farms). Interestingly enough, you can even test for scale - but that's a different blog post. However, going from solving a portion of a Kakuro Puzzle to 14 full blown ones isn't too challenging!</p>]]></description><link>http://shakilthakur.com/quickly-writing-a-kakuro-solver/</link><guid isPermaLink="false">bd673a9d-bd4a-4044-bb1d-ef7c697d630d</guid><dc:creator><![CDATA[Shakil Thakur]]></dc:creator><pubDate>Thu, 27 Nov 2014 03:26:20 GMT</pubDate></item><item><title><![CDATA[TableSalt: final forward check features?]]></title><description><![CDATA[<p>The optimization games continue with TableSalt. <a href="http://shakilthakur.com/optimizing-code-layout-for-speed/">Last time</a> I managed to get down to a cool 222ms/puzzle, but of course I'm gonna keep trying for that 100ms! This time the optimizations came from the forward checking algorithm and some of the code used in determining which variable has the smallest domain.</p>

<h2 id="background">Background</h2>

<p>TableSalt uses forward checking during backtracking using a minium remaining value (MRV) heuristic - this means it runs through all unassigned variables and finds the one with the smallest domain.</p>

<p>Finding MRV for Cell 05:  </p>

<pre><code class="lang-none">4 1 ? | 3 ? ? | 8 ? 5        01 02 03 | 04 05 06 | 07 08 09  
? 3 ? | 1 ? ? | ? ? ?        10 11 12 | 13 14 15 | 16 17 18
? 5 ? | 7 ? ? | ? ? ?        19 20 21 | 22 23 24 | 25 26 27
------+-------+------        ---------+----------+---------
8 2 5 | 4 3 7 | 1 6 9        28 29 30 | 31 32 33 | 34 35 36  
? 9 ? | 5 8 ? | 4 ? ?        37 38 39 | 40 41 42 | 43 44 45
? 4 ? | 9 1 ? | ? ? ?        46 47 48 | 49 50 51 | 52 53 54
------+-------+------        ---------+----------+---------
2 8 9 | 6 4 3 | 5 7 1        55 56 57 | 58 59 60 | 61 62 63  
5 7 3 | 2 9 1 | 6 ? ?        64 65 66 | 67 68 69 | 70 71 72  
1 6 4 | 8 7 5 | ? ? ?        73 74 75 | 76 77 78 | 79 80 81  
</code></pre>

<p>Look at the value in <code>Cell 05</code> (in the upper right). At this state, the only values it could be are 2 and 6 (this is the domain). The MRV for that cell is 2.  </p>

<h3 id="degreeheuristic">Degree Heuristic</h3>

<p>If multiple values have the smallest domain, it resorts to a degree heuristic. The degree heuristic looks at how many other variables would be affected if the current value was assigned and tries to maximize this.</p>

<p>Degree Heuristic when two cells have the same domain size:  </p>

<pre><code class="lang-none">4 1 ? | 3 ? ? | 8 ? 5        01 02 03 | 04 05 06 | 07 08 09  
? 3 ? | 1 ? ? | ? ? ?        10 11 12 | 13 14 15 | 16 17 18
? 5 ? | 7 ? ? | ? ? ?        19 20 21 | 22 23 24 | 25 26 27
------+-------+------        ---------+----------+---------
8 2 5 | 4 3 7 | 1 6 9        28 29 30 | 31 32 33 | 34 35 36  
? 9 ? | 5 8 ? | 4 ? ?        37 38 39 | 40 41 42 | 43 44 45
? 4 ? | 9 1 ? | ? ? ?        46 47 48 | 49 50 51 | 52 53 54
------+-------+------        ---------+----------+---------
2 8 9 | 6 4 3 | 5 7 1        55 56 57 | 58 59 60 | 61 62 63  
5 7 3 | 2 9 1 | 6 ? ?        64 65 66 | 67 68 69 | 70 71 72  
1 6 4 | 8 7 5 | ? ? ?        73 74 75 | 76 77 78 | 79 80 81  
</code></pre>

<p>The function proceeds along and now is looking at <code>Cell 08</code> - where the value can only be 2 or 6. This MRV here is also 2, which means TableSalt resorts to the degree heuristic. The degree heuristic deals with the number of unknowns associated with a cell. For sudoku, that is the number of cells that aren't known in the column, row, or section of the cell in question. For <code>Cell 08</code>, this is 18 (4 for the row + 7 for the column + 7 for the section, and yes it overlaps and includes itself) and for <code>Cell 05</code> it is 13 (4 for the row + 3 for the column + 6 for the section). As such TableSalt will use <code>Cell 08</code> moving forward as it affects more values.</p>

<h2 id="theproblem">The Problem...</h2>

<p>I messed up - like really messed up on this one. I initially misread my AI notes and was using the number of constraints the cells were involved in for the degree heuristic.  </p>

<blockquote>
  <p>This seems worthless for sudoku. All the values are the same...</p>
</blockquote>

<p>Yup and if you're questioning something that seems worthless, you should probably look into it. Whoops... The values were all 3 as each cell has <code>AllDiff</code> applied in the column, row, and section. Not good - I was counting up the wrong things... So I wrote a little for loop that actually got the number of affected cells and some more code that updated the values accordingly! HUZZAH! Major bug fixed (and a boat-load of time savings)!</p>

<p>Interestingly enough, I found this bug after questioning this one itty bit of code: what should be done if the degree heuristics are the same?</p>

<h2 id="meh">meh</h2>

<p>That's right, I did nothing. Little did I know this was another <strong>terrible</strong> mistake. I was writing the previous post on TableSalt and had linked the <a href="http://en.wikipedia.org/wiki/Look-ahead_(backtracking)">Look-ahead</a> article form Wikipedia, where this one little sentence caught my eye:</p>

<blockquote>
  <p>Randomization is also sometimes used for choosing a variable or value. For example, if two variables are equally preferred according to some measure, the choice can be done randomly.</p>
</blockquote>

<h2 id="randomyousay">RANDOM YOU SAY!</h2>

<p>and that was that! So I added a little check to see if degree values were the same and to choose randomly between them if they were:</p>

<pre><code class="lang-lua">if currentDegree &gt; smallestDegree then  
    cellIndex = i
elseif currentDegree == smallestDegree then  
    if math.random() &gt; .5 then
        cellIndex = i
    end
end  
</code></pre>

<p>simple enough!</p>

<h2 id="results">Results!</h2>

<p>MAN OH MAN! So much time savings! Gotta fix them bugs and add some features!  </p>

<h3 id="addingrandom">Adding Random</h3>

<p>This was the first thing that was addressed. A <em>dramatic</em> decrease in times! Also, now there is a bit of variation in how long it takes to solve the problem. Regardless, it took my 222ms down to 150-180ms/puzzle range! A cool 40-70ms faster! and a few ms closer to the elusive 100ms!  </p>

<h3 id="fixingupmydegreeheuristic">Fixing up my degree heuristic</h3>

<p>This brought me down into the 90-100ms/puzzle range. An additional 50-90ms!!!! OH YES! THAT WONDROUS SUB 100MS TIME IS MINE! and I probably wouldn't even have gotten there if I hadn't started writing this blog - I likely would've wasted some time trying to get some functions written in C or something... PSHHHH PURE LUA FTW~!</p>

<p>I ran my (self-asserting!) tests, and was good to go! As such the code is up on <a href="https://github.com/fouriertransformer/TableSalt">GitHub</a>! Let me know if you have any other optimization tips! Otherwise I think I may be done working on TableSalt for a while!</p>]]></description><link>http://shakilthakur.com/tablesalt-final-forward-check-features/</link><guid isPermaLink="false">e069fc1c-3b41-4ae5-a9ee-07dddb1b4104</guid><category><![CDATA[TableSalt]]></category><dc:creator><![CDATA[Shakil Thakur]]></dc:creator><pubDate>Tue, 18 Nov 2014 23:45:50 GMT</pubDate></item><item><title><![CDATA[TableSalt: optimizing code layout for speed in lua]]></title><description><![CDATA[<p>A while back I wrote <a href="http://github.com/fouriertransformer/TableSalt">TableSalt</a> - a constraint satisfaction framework written in [currently pure] lua. Every now and again I'll revisit it and try to make it run faster and get rid of any bugs found along the way. For benchmarking I use my SudokuSolver on a test of <a href="http://norvig.com/top95.txt">95 sudoku puzzles</a>.</p>

<p>My goal is a 100ms average. Back in May 2014 I was chilling at 337ms. Before these layout changes, I was at 253ms. Now I'm at 222ms and am only inching ever closer!</p>

<h2 id="originalcodelayout">Original Code Layout</h2>

<p>Initially I had a <code>cell</code> object, this is best thought of as an empty "cell" in sudoku or a variable in <a href="http://en.wikipedia.org/wiki/Constraint_satisfaction_problem">constraint satisfaction problems</a>. Each cell has a domain, value, and a reference to each of the constraints it is associated with.</p>

<p>As such the code was pretty straigtforward:  </p>

<pre><code class="lang-lua">function cell:initialize(domain)  
     self.domain = domain
     self.value = nil
     self.constraints = {}
 end
</code></pre>

<p>I needed a table of cells to keep track of all the cells:  </p>

<pre><code class="lang-lua">self.cells = {}  
for i = 1, self.size do  
    self.cells[i] = cell:new({unpack(domain)})
end  
</code></pre>

<p>The <code>{unpack()}</code> created a deepcopy for each <code>cell</code>'s domain. <code>unpack</code> is a built-in lua function that explodes a table, the curly brackets around it create a new version and a deep copy is born!</p>

<h2 id="thebackup">The Backup</h2>

<p>While writing TableSalt, I wrote a ForwardCheck (or <a href="http://en.wikipedia.org/wiki/Look-ahead_(backtracking)">look-ahead</a>) function that needed to backup and restore the current state of the cells. Easy enough:  </p>

<pre><code class="lang-lua">function TableSalt:backupCells()  
    local serial = {{}, {}}
    for i = 1, self.size do
        serial[1][i] = {unpack(self.cells[i].domain)}
        serial[2][i] = self.cells[i].value
    end
    return serial
end

function TableSalt:restoreCells(serial)  
    for i=1, self.size do
        self.cells[i].domain = serial[1][i]
        self.cells[i].value = serial[2][i]
    end
end  
</code></pre>

<h2 id="theproblem">The Problem.</h2>

<p>This was slow. When I ran the code against a profiler, the code backup and <code>AllDiff</code> constraint were usually the prime culprits of wasting time. On my [unrealistic?] goal towards 100ms, wasting time on backups and restores was not an option. I read up on <a href="http://www.lua.org/gems/sample.pdf">optimizing lua code</a> and posted on <a href="http://stackoverflow.com/questions/26453830/optimizing-a-lua-table-backup">stackoverflow</a> looking for help.</p>

<h2 id="speedingitallup">SPEEDING IT ALL UP!</h2>

<p>I got rid of the cell class. Arguably, it's bad code design, but I did it in the name of speed. Here's what the initializer code became:  </p>

<pre><code class="lang-lua">self.cellValue = {}  
self.cellDomain = {}  
self.cellConstraint = {}  
for i = 1, self.size do  
    self.cellConstraint[i] = {}
    self.cellDomain[i] = {unpack(domain)}
end  
</code></pre>

<p>and as some of you lua aficionados might notice - I could've used a <code>self.cells = {}</code> and made each of those tables into <code>self.cells.value</code>, <code>self.cells.domain</code>, and <code>self.cells.constrains</code>, but I would gain ~4ms if I did so. If I ever get sub-100ms, I may consider adding it back in for the sake of better code design.</p>

<p>Anyway, this allowed me to do was create clones quickly and avoid the need to "restore" the values to their initial state. Now the backup function (which looks VERY similar to before) is:  </p>

<pre><code class="lang-lua">local function backupCells(cellDomain, cellValue)  
    local cellDomain, cellValue = cellDomain, cellValue
    local serial = {{}, {}}
    for i = 1, #cellDomain do
        serial[1][i] = {unpack(cellDomain[i])}
        serial[2][i] = cellValue[i]
    end
    return serial
end  
</code></pre>

<p>and restore has become a quick two-liner:  </p>

<pre><code class="lang-lua">self.cellDomain = cellCopy[1]  
self.cellValue = cellCopy[2]  
</code></pre>

<p>This provided a <em>fairly</em> significant speedup! On the sudoku benchmark, I now average ~222ms/puzzle - a whopping <strong>31ms</strong> speedup from the 253ms before it.</p>

<h2 id="thefuture">The Future</h2>

<p>I'm starting to think I'm reaching the end of pure-lua optimizations. I want to convert the cell backup and parts of the <code>AllDiff</code> function to C and see if that offers any significant speedup. If anyone has any other suggestions for speed (the code can be found on <a href="https://github.com/FourierTransformer/TableSalt">GitHub</a>) - please let me know I'd love to hear it!</p>]]></description><link>http://shakilthakur.com/optimizing-code-layout-for-speed/</link><guid isPermaLink="false">15c55e33-118b-4762-a904-93eff2082678</guid><category><![CDATA[TableSalt]]></category><dc:creator><![CDATA[Shakil Thakur]]></dc:creator><pubDate>Mon, 17 Nov 2014 00:36:59 GMT</pubDate></item><item><title><![CDATA[ecto is out there!]]></title><description><![CDATA[<p>I released my static site generator for <a href="http://ghost.org/">Ghost</a> into the wild! Sure, the code has been online for a few days, but we all know it's the <code>README</code> that makes the program!</p>

<p>It's currently available on <a href="https://github.com/FourierTransformer/ecto-1">GitHub</a>.</p>

<h2 id="background">Background</h2>

<p>I created a blog theme wwaaayy back when in late August when Paul and I were talking about websites. I revived it in late October and decided to launch November 2nd, 2014. A blog that would've launched on that wonderful day, if the static site generator I used had worked... If only the RSS feeds, static pages, custom 404's, and the odd css issue were a non-issue - but, they weren't...</p>

<h2 id="creation">Creation</h2>

<p>For the next two days, I pieced together a script that was able to pull together enough of a website to make it publishable and then "<a href="http://fouriertransformer.github.io/">http://fouriertransformer.github.io</a>" was born. It had posts and pages and could navigate without any styling issues!</p>

<h2 id="butwaittheresmore">But wait, there's more!</h2>

<p>This wasn't enough. I pushed forward, optimized, refactored, got a good handle on RSS feeds, and added a custom 404 page. All of which was can be read in slightly more detail in my <a href="http://shakilthakur.com/ecto-extended-commit-2-log/">extended commit 2 log</a> for ecto. I added some <code>CNAME</code> for github and it was good to go.</p>

<h2 id="writingthereadme">Writing the <code>README</code></h2>

<p>I always figure this should be a quick thing, but I find myself spending quite a bit of time on it - perhaps for the better! But now that it's done, I feel as people can use it and hopefully make their static-sites with it!</p>

<h2 id="thefuture">THE FUTURE</h2>

<p>From here on out, I can only hope people will use it. I know I will for as long as I'm still writing this blog. As far as updates, if I (or anyone really) have a need for anything or find a bug, I'll definitely update ecto and if if proves stable enough I'll push it up to luarocks and have a party!</p>]]></description><link>http://shakilthakur.com/ecto-is-out-there/</link><guid isPermaLink="false">6ce650c6-bf5d-4300-939d-27ef3b152b48</guid><category><![CDATA[ecto]]></category><dc:creator><![CDATA[Shakil Thakur]]></dc:creator><pubDate>Tue, 11 Nov 2014 00:57:26 GMT</pubDate></item><item><title><![CDATA[ecto: Extended Commit 2 Log]]></title><description><![CDATA[<p>Wow, I usually commit waaay more frequently, so "extended commit logs" shouldn't really be a thing...</p>

<h2 id="nomorewritingoutjson">No more writing out json.</h2>

<p>I was doing it before for easier debugging, but now it's gone. POOF. NADA. ZIP!</p>

<h2 id="refactor4dayz">Refactor4Dayz</h2>

<p>I suppose this happens when code isn't fully designed when it starts getting written (YAY short projects!). Apparently ghost can have multiple pages with the <a href="http://themes.ghost.org/v0.5.3/docs/structure">tag's and author's context</a> (as of ghost v0.5.3). This is the only "brute force" run-until-it-stops code that is used. The alternative was checking which post was written by what author and what tags were associated and counting it all up.</p>

<pre><code class="lang-lua">local returnCode  
local i = 2  
repeat  
    local pageDirectory = directory .. "/page/" .. i
    local pageURL = server .. pageDirectory
    local handle = io.popen("curl -s -I " .. pageURL)
    returnCode = handle:read("*l")
    handle:close()
    if returnCode:find("HTTP/1.1 200 OK") then
        os.execute("mkdir " .. pageDirectory)
        os.execute("curl -s -L -o " .. pageDirectory .. "/index.html " .. pageURL)
    end
    i = i + 1
until returnCode:find("HTTP/1.1 302 Moved Temporarily")  
</code></pre>

<p>As much as I love databases, I didn't really want to write parts of one. This was used for the <code>/author/</code> and <code>/tag/</code> pages. Side|: I had to use the <code>find</code> method as equality checking didn't work on those strings - I think it had something to do with being read from <code>popen</code> but I'm not entirely certain...</p>

<h2 id="sitemaps">Sitemaps?!</h2>

<p>I saw the epitome of JSON and was about to write a custom sitemap generator, however, apparently it's coming with ghost v0.5.4 - which is to be released in the <a href="https://github.com/TryGhost/Ghost/issues/623">next few days!</a> As of now, ecto checks to see if <code>sitemap.xml</code> exists and downloads it if it does!</p>

<h2 id="rssfeeds">RSS Feeds.</h2>

<p>Blerg. This caused some angst. OOTB ghost serves rss feeds as <code>/rss/</code> and not any sort of file (with a type) and you can't really serve rss feeds as an <code>index.html</code>. So, I "compromised" by having ecto write out to <code>rss.xml</code> in the correct directory and relying on the user to modify their ghost theme files accordingly - which involves going through their theme and replacing instances of <code>/rss/</code> with <code>/rss.xml</code>.</p>

<h2 id="404pagenotfound">404 Page Not Found</h2>

<p>This is for the github users - ecto now also creates a <code>404.html</code> page! This was a minor hassel as by default ghost error page stores two images and a css file in a different directory compared to the user files. I'm not entirely sure what happens with custom error pages - so that may be worth looking in to.</p>

<h2 id="gitpush">git push</h2>

<p>The code is up on <a href="https://github.com/FourierTransformer/ecto-1">github</a> and I will likely be writing up a README for ecto tomorrow.</p>]]></description><link>http://shakilthakur.com/ecto-extended-commit-2-log/</link><guid isPermaLink="false">8c612712-fefc-4ac9-99e8-8997a0aded10</guid><category><![CDATA[ecto]]></category><dc:creator><![CDATA[Shakil Thakur]]></dc:creator><pubDate>Fri, 07 Nov 2014 04:58:21 GMT</pubDate></item><item><title><![CDATA[Getting at Ghost's Goodies (or rather handling oAuth)]]></title><description><![CDATA[<p>I finally got my blog up and running and what was the first thing I wanted to do? See what goodies the API had in store! Unfortunately [for me] this required some fancy authorization (oAuth) that I had never encountered before...</p>

<h2 id="readup">Read up!</h2>

<p>First things first, I read through the <a href="https://github.com/TryGhost/Ghost/wiki/%5BWIP%5D-API-Documentation">ghost api</a> and their page on <a href="https://github.com/TryGhost/Ghost/wiki/How-does-oAuth-work-with-Ghost%3F">oAuth</a>. This got me decently far: <em>"I need to make a POST request to get this 'token' thingy"</em></p>

<h2 id="tokentime">Token Time!</h2>

<p>I could make a <code>POST</code> request from the browser, but that's not how any <em>real</em> application would do it. <code>curl</code> is the magic that is needed:</p>

<pre><code>curl --data "grant_type=password&amp;username=[GHOST-EMAIL]&amp;password=[PASSWORD]&amp;client_id=ghost-admin" http://localhost:2368/ghost/api/v0.1/authentication/token/
</code></pre>

<p>That's quite a command. The <code>--data</code> is the important part that allows you to do a <code>POST</code> request on the URL. And it returns something like this beautiful piece of JSON:</p>

<pre><code>    {
  "access_token": "juIO6W4bIPemZMOmjuUHdc19Hcw6v29STFTMOHFmvLfGRnWozRuaKLGIZyiWWHETpxjesM50cY5CWX6vKuCa6PxE9tRB7vJdaI61B0f5QERmRuDymWutqzMeS7oCz92TU7Zq1fv30Chw2MOHbBmT3inLTA6JURExSV16G9TKI1b2xzdKM7iTROY9tUpucXwYKOYt5mf7m7u5ojWXwHTowWsYXPgZj1xQK6GBtEY5bEKtdqmlKfiTfVfbwhfbWOs",
  "refresh_token": "k2UDQAUGKta7d5qaqGa6ZVRY6C3fNgrLF395GyTOldUl7QZd6mS82qMWQzpBcEcdkunnDuglXT0jT39q2N7Y3vUNHjMJSEyFACjML7EhXyUnHhps1CLXCgpo4rVKud6N2dWYWOf5SVt3ApZFRtEsnH1bONYRkWtGZtsaZahd1U7F4S4ub5s9TKtkcUaMz23yPRIHoZAfy1RACekw4xAKbhMQIURYM8mysrinSxvyQ2VYtcOuofwgHFvvrrJvzSG",
  "expires_in": 3600,
  "token_type": "Bearer"
}
</code></pre>

<h2 id="inserttoken">Insert Token</h2>

<p>Alright, we got the token! Now it's time to use it. Back on the <a href="https://github.com/TryGhost/Ghost/wiki/%5BWIP%5D-API-Documentation">API page</a> you'll notice a lot of commands with <code>POST</code>, <code>GET</code>, and some <code>DELETE</code>. You can run a <code>POST</code> request similar to above using <code>--data</code>, but <code>GET</code> and <code>DELETE</code> are much easier. I wanted to download the database so I could putz around with ghost-cli (which I really hope the maintainers pronounce as ghost chili).</p>

<pre><code>curl -X GET -o data.json http://localhost:2368/ghost/api/v0.1/db/?access_token=juIO6W4bIPemZMOmjuUHdc19Hcw6v29STFTMOHFmvLfGRnWozRuaKLGIZyiWWHETpxjesM50cY5CWX6vKuCa6PxE9tRB7vJdaI61B0f5QERmRuDymWutqzMeS7oCz92TU7Zq1fv30Chw2MOHbBmT3inLTA6JURExSV16G9TKI1b2xzdKM7iTROY9tUpucXwYKOYt5mf7m7u5ojWXwHTowWsYXPgZj1xQK6GBtEY5bEKtdqmlKfiTfVfbwhfbWOs
</code></pre>

<p>This time around the <code>-X GET</code> is what's doing a <code>GET</code> request and the <code>access_token</code> is just appended to the URL. Similarly a <code>-X DELETE</code> could be used on any API function that supports a <code>DELETE</code> request. Oh, and the <code>-o</code> is just dumping it the data to <code>data.json</code>.</p>

<p>Sweet, now I can use <a href="https://github.com/jeffdonthemic/ghost-cli">ghost-chili</a> and have a better understanding on handling oAuth. </p>]]></description><link>http://shakilthakur.com/getting-ghosts-goodies/</link><guid isPermaLink="false">c310b340-6c03-4957-9594-634f3cdaf37e</guid><category><![CDATA[ecto]]></category><dc:creator><![CDATA[Shakil Thakur]]></dc:creator><pubDate>Thu, 06 Nov 2014 03:23:19 GMT</pubDate></item><item><title><![CDATA[Test Post Please Ignore]]></title><description><![CDATA[<p>I used this post (along with the default one) while creating this theme and testing responsiveness and whatnot. More posts are coming!</p>

<p>Original Text from Development (saved for posterity): <br>
I'm really just messing around and seeing what happens when I don't tag anything!</p>]]></description><link>http://shakilthakur.com/test-post-please-ignore/</link><guid isPermaLink="false">c8201acc-996e-490c-abe1-b7a52f93ac62</guid><dc:creator><![CDATA[Shakil Thakur]]></dc:creator><pubDate>Sun, 02 Nov 2014 02:04:16 GMT</pubDate></item></channel></rss>